#!/bin/bash

# signmykey -- sign the user's public SSH key, outputting the
# resulting certificate to stdout

# Tom Lee, Indiana University <thomlee@iu.edu>
# Begun 2013-03-13
# Last modified 2013-03-15

# How we get user keys signed:

# 1. Write an SSH public user or host key to $KEY_SPOOL, for example
# to a file called 'id.pub'.

# 2. Write ssh-keygen options to $KEY_SPOOL/id.pub.opts as follows:

# -I 'username@goc' -n username

# 3. Using 'touch' or something similar, write a zero-length file
# called $KEY_SPOOL/id.pub.written to signal that we're done writing
# data.

# 4. Wait for a file called $KEY_SPOOL/id.pub.done to appear.  That's
# casignd signaling that it's done.  Unless an error of unforeseen
# proportions occurs, the .done file will get written no matter what,
# but have a timeout in any case.

# 5. Find the certificate in $KEY_SPOOL/id-cert.pub.  If the
# certificate file didn't get written, there was an error of some
# kind; check /var/log/messages.

# 6. Print the certificate file's contents to standard output and
# delete the key and the .opts, .written, and .done files (.done file
# last).  Delete the .opts and .written files even if there was a
# timeout, so casignd doesn't keep trying to sign the certificate and
# getting the same error over and over.

# Usage: cat /path/to/id.pub | signmykey > /path/to/id-cert.pub

###############################################################################
# Settings
###############################################################################

# Key spool directory for casignd
KEY_SPOOL=/opt/var/spool/casignd

# How long (in microseconds) to sleep between checks while we're
# waiting for casignd to sign the certificate
USLEEP=250000

# Timeout (in seconds) after submitting a certificate to casignd
# before deciding that there's been some kind of error.  Usually, if
# something's wrong with the key, casignd will write $KEY.done without
# writing the certificate and log an error message to syslog, so this
# timeout won't happen unless things go seriously pear-shaped.
TIMEOUT=10

###############################################################################
# Functions
###############################################################################

function print_help() {
    cat <<EOF
Usage: cat /path/to/id.pub | $0 [<options>] > /path/to/id-cert.pub
Options:
  -d: Debug mode; extra output on stderr
  -h: This help
  -u <username>: Username for certificate
EOF
}

function debug_printf() {
    # Like printf, but exits unless $DEBUG is set.  Also prints
    # "DEBUG: " at the beginning of every line.

    local fmt="$1"
    shift
    if [[ ! "$DEBUG" ]]; then
	return
    fi
    printf "DEBUG: $fmt\n" "$@" >/dev/stderr
}


function handle_options() {
    # Handle the command-line options.  The getopts command (a bash builtin)
    # returns true as long as the positional parameters contain more
    # constructions that look like command-line options.  It places the index
    # of the current option in $OPTIND and the argument (if there is one) of
    # the current option in $OPTARG.  The arguments of getopts itself are a
    # string consisting of the options it's supposed to recognize and the
    # variable to put the recognized option into.  Now, getopts stops when it
    # reaches a "--", which is intentional, to allow script writers to make it
    # possible to pass options on to other programs the script calls, and
    # that's what we're doing here -- anything after a "--" is to be passed on
    # to yum.  This function, after getopts hits a "--", cuts it and everything
    # before it from $@ and saves what's left in $LEFTOVER_OPTS.  This doesn't
    # affect the global command-line parameters; it only operates on the
    # positional parameters passed to the function (which is why the
    # command-line parameters have to be passed to it).

    local opt
    while getopts "dhu:" opt; do
	case "$opt" in
	    d)
		DEBUG=1
		echo "DEBUG mode on due to -d option.  You will see DEBUG messages." > /dev/stderr
		;;
	    h)
		print_help
		exit 0
		;;
	    u)
		debug_printf "Using username '%s'" "$OPTARG"
		CERT_USER="$OPTARG"
		;;
	    ?)
		echo "Error: Required parameter missing" > /dev/stderr
		print_help
		exit 1
		;;
	    *)
		echo "Error: Unknown option" > /dev/stderr
		print_help
		exit 1
		;;
	esac
    done
    shift $(( $OPTIND - 1 ))
    LEFTOVER_OPTS="$@"
}

function init() {
    # Do any initialization tasks.

    handle_options "$@"
    if [[ -z "$CERT_USER" ]]; then
	if [[ "$USER" == "root" ]]; then
	    echo "Error: You must specify a user via the -u option" > /dev/stderr
	    exit 1
	else
	    CERT_USER="$USER"
	fi
    fi
}

function cleanup () {
    # Clean up after ourselves -- remove $KEY.written first in a
    # separate action so there's no possibility of a race condition if
    # casignd # somehow runs here (it will see $KEY.done and move on).
    rm -f $KEY.written
    rm -f $KEY $CERT $KEY.opts $KEY.done
}

###############################################################################
# Main script
###############################################################################

# Initialize.
init "$@"

# If the user can't write to the spool directory, either they're not
# authorized or things are set up incorrectly.  In any case, there's
# no point in proceeding.
if [[ ! -w $KEY_SPOOL ]]; then
    echo "Can't write to spool directory.  Exiting." > /dev/stderr
    exit 1
fi

# Make a temporary file in which to store the public key until we can
# place it in $KEY_SPOOL.  We want to avoid a race condition with
# casignd, which could happen (though the chance would be very slim)
# if we were to directly put it into $KEY_SPOOL.  Basically
# $KEY_SPOOL/$TMPKEY.opts and $KEY_SPOOL/$TMPKEY.written would have to
# already exist, but $KEY_SPOOL/$TMPKEY.done would have to not exist,
# and casignd would have to check $KEY_SPOOL during the time when we
# created $KEY_SPOOL/$TMPKEY and the time when we deleted the .opts
# and .written files, which would of course be the very next line in
# the script.  Anyway, we avoid the whole issue completely by starting
# in /tmp (it's a public key, so it doesn't matter if somebody else
# observes its content).

TMPKEY=`mktemp /tmp/signmykey.XXXXXXXXXX`

# Write the actual key data to $TMPKEY so we can calculate its
# fingerprint -- ssh-keygen is incapable of accepting the actual key
# data from standard input; it needs a file path.
cat /dev/stdin > $TMPKEY

# Get ssh-keygen to calculate the key's fingerprint.
FP=`ssh-keygen -l -f $TMPKEY | cut -d ' ' -f 2 | sed -e 's/://g'`
debug_printf "Key fingerprint: %s" "$FP"

# Now assemble the final file path in $KEY_SPOOL.
KEY="$KEY_SPOOL/$FP.pub"
debug_printf "Key file path: %s" "$KEY"

# Figure out in advance what the certificate will be called.  This
# bash magic means to find what $KEY would look like if '.pub' were
# removed from the end of it, and append '-cert.pub' onto the end of
# that.  This is how ssh-keygen names the certificate files it creates
# -- if they end in '.pub', it changes that to '-cert.pub', but if
# they don't end in '.pub', it appends '-cert.pub' to whatever it does
# end with.
CERT=${KEY%.pub}-cert.pub
debug_printf "Cert file path: %s" "$CERT"

# To make sure there's still no possibility for a race condition with
# casignd, delete these files in advance, if they somehow exist (the
# most common way for this to happen would be if the user had
# submitted the same key to be signed within the past few minutes but
# is now doing it again for some reason):
rm -f $KEY.written $KEY.done $KEY.opts

# Put the key in place, now that the way has been prepared.  No race
# condition can happen, because casignd will not act until $KEY.opts
# and $KEY.written both exist.
debug_printf "Moving %s to %s" "$TMPKEY" "$KEY"
mv $TMPKEY $KEY

# ssh-keygen refuses to sign a key not owned by the principal
if [[ "$USER" == "root" ]]; then
    chown $CERT_USER:$CERT_USER $KEY
fi

# Generate $KEY.opts.  We need the username for this.  Fortunately it
# should be in $CERT_USER.
debug_printf "Options: -I '%s@goc' -n '%s'" "$CERT_USER" "$CERT_USER"
echo "-I '$CERT_USER@goc' -n '$CERT_USER'" > $KEY.opts

# Now touch $KEY.written to signal casignd that we're ready.
debug_printf "Touching %s.written" "$KEY"
touch $KEY.written

debug_printf "Contents of %s:" "$KEY_SPOOL"
if [[ "$DEBUG" ]]; then
    ls $KEY_SPOOL >/dev/stderr
fi
# Now wait for $KEY.done to exist, which is casignd's signal to us
# that it's done signing.  If this takes too long, that means there's
# been some kind of error, so save $STARTTIME so we can always look at
# the current time and compare the time elapsed since $STARTTIME with
# $TIMEOUT.
debug_printf "Waiting for %s.done to exist" "$KEY"
STARTTIME=`date +'%s.%N'`
while [[ ! -e $KEY.done ]]; do
    usleep $USLEEP
    CURRTIME=`date +'%s.%N'`
    # dc is fun!  This dc "program" means:
    # * Push 0 onto the stack
    # * Store a macro in register 'a' that pushes 1 onto the stack if executed
    # * Push $TIMEOUT onto the stack
    # * Push the elapsed time ($CURRTIME minus $STARTTIME) onto the stack
    # * (The elapsed time is on top of the stack now, and $TIMEOUT is second)
    # * Execute the macro in register 'a' if the elapsed time is !< $TIMEOUT
    # * Print the value on top of the stack
    # or, in other words ...
    # If ($CURRTIME - $STARTTIME) >= $TIMEOUT, print 1; otherwise print 0
    # The use of dc allows the precision to be in fractional seconds.
    # The "'!'" is necessary because bash doesn't correctly escape !
    # with backslash within double quotes.  :(
    if [[ `echo "0 [1] sa $TIMEOUT $CURRTIME $STARTTIME - "'!'"<a p" | dc` == '1' ]]; then
	debug_printf "Contents of %s:" "$KEY_SPOOL"
	if [[ "$DEBUG" ]]; then
	    ls $KEY_SPOOL >/dev/stderr
	fi
	echo "ERROR: Timeout occurred." > /dev/stderr
	cleanup
	exit 1
    fi
done

# Output the certificate, if it exists (which it will unless casignd
# didn't like it for some reason).
if [[ -e $CERT ]]; then
    cat $CERT
else
    echo "ERROR: Invalid key (attempt logged)." > /dev/stderr
    exit 1
fi

# And clean up.
cleanup
exit 0
