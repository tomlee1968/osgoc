#!/bin/bash

# casignd -- sign SSH keys in spool directory
# By Thomas Lee <thomlee@iu.edu>
# Begun 2013-03-12
# Last modified 2013-03-15

# Other scripts place SSH public keys in the spool directory,
# $KEY_SPOOL, and wait for this program to process it and signal that
# it's done.

# Because those other scripts that place the keys in $KEY_SPOOL can't
# give this command any arguments, all the information about the key
# must somehow be stored within the key itself.  The only places the
# information can be stored are in the filename and in the key's
# comment field.  Because of this, we cannot really afford to accept
# just any key for signing -- we'll have to check keys to make sure
# their comments contain either the name of a user in the $AGRP group
# or the name or IP of a host that is in one of OSG Operations's
# accepted domains or IP ranges.  Nothing's easy.

# Since there can be a race condition (the script that placed the key
# in the spool directory might see the certificate appear before
# ssh-keygen is finished writing it), this daemon will also write an
# empty "done file" in the spool directory after ssh-keygen is
# finished.

# This script wakes up every $SLEEP_TIME seconds, looks in $KEY_SPOOL
# for suitable keys, signs any it finds with appropriately-selected
# parameters, writes a "done file" for each of those, and deletes any
# keys, certificates and done files that are older than $EXPIRE
# minutes.  (If they haven't been picked up by the script that put
# them there by that time, they've been abandoned -- perhaps the
# script errored out or the user pressed Ctrl-C.)

# Since it can't really be given any command-line options, this script
# will look for an "options file": a file with the same name as a
# public key, but with .opts appended.  This file will contain a line
# consisting of the options to an "ssh-keygen -s" command; this script
# supports the -h, -I, -n, -O, and -V options.

# Usage:

# This daemon isn't directly run by any script other than its
# initscript.  To make use of it, however, while it's running, another
# script should:

# 1. Write an SSH public user or host key to $KEY_SPOOL, for example
# to a file called 'id.pub'.

# 2. Write ssh-keygen options to $KEY_SPOOL/id.pub.opts as follows:
#   a. For user keys, be sure the username is in the -n parameter:

# -I username@goc -n username

#   b. For host keys, be sure the -n parameter contains a
#   comma-separated list of all hostnames and IP addresses that anyone
#   will ever be using to connect to the host via ssh:

# -h -I foo.grid.iu.edu,foo.goc,129.79.53.345,192.168.97.456, -n foo.grid.iu.edu

# 3. Using 'touch' or something similar, write a zero-length file
# called $KEY_SPOOL/id.pub.written to signal that it's done writing
# data.

# 4. Wait for a file called $KEY_SPOOL/id.pub.done to appear.  That's
# this script signaling that it's done.

# 5. Find the certificate in id-cert.pub.  The ssh-keygen program adds
# the '-cert' infix before the '.pub' suffix.  If the key file's name
# didn't end in '.pub', it adds the entire '-cert.pub' suffix to the
# end.  If the certificate file didn't get written, there was an error
# of some kind; check /var/log/messages.

# 6. It's polite to move the cert out of $KEY_SPOOL and delete the key
# and the .opts, .written, and .done files (.done file last).

# NOTE: For user keys, the user in the -n parameter must exist and be
# in the $AGRP group of authorized users (if they're not, they
# shouldn't be able to write files to $KEY_SPOOL anyway).  That user
# must also be the same as the user who owns the key file.  For host
# keys, the owner of the key file must be $AUSR.

###############################################################################
# Settings
###############################################################################

# Always limit the $PATH when writing a script that runs as root
PATH=/sbin:/usr/sbin:/bin:/usr/bin

# CA private key
CA_KEY=/root/.ssh/osgops_ca

# Executable that supplies CA private key passphrase
CA_PWD_EXE=/root/.ssh/printcapwd

# Authorized user for host keys
AUSR=goc

# Authorized group
AGRP=goc

# Spool directory
KEY_SPOOL=/opt/var/spool/casignd

# PID file
PID_FILE=/opt/var/run/casignd.pid

# Sleep time in seconds
SLEEP_TIME=2

# Keys older than this many minutes are abandoned and should be deleted
EXPIRE=10

###############################################################################
# Functions
###############################################################################

function init() {
    # Set things up.

    # Make sure $KEY_SPOOL exists and is a directory.
    if [[ -e $KEY_SPOOL ]]; then
	if [[ ! -d $KEY_SPOOL ]]; then
	    # Something that isn't a directory is in $KEY_SPOOL's
	    # place; move it aside.
	    mv $KEY_SPOOL $KEY_SPOOL.bak
	    mkdir $KEY_SPOOL
	fi
    else
	# $KEY_SPOOL doesn't exist at all.
	mkdir -p $KEY_SPOOL
    fi
    # Make sure $KEY_SPOOL has the right ownerships and permissions.
    chmod 0770 $KEY_SPOOL
    chgrp $AGRP $KEY_SPOOL
    trap 'finish' INT TERM
    trap 'check_now' HUP
}

function check_now() {
    # Check for keys to sign in $KEY_SPOOL.
    local i
    for i in $KEY_SPOOL/*; do
	# Clearly we only want files that are actual SSH public keys.

	# If we run "ssh-keygen -l" on a public key, it will print the
	# key's fingerprint.  Unfortunately, if we run it on a secret
	# key (called id_rsa, for example), it will find the related
	# public key by filename (id_rsa.pub) and print the
	# fingerprint of that rather than throwing an error (though it
	# will throw an error if it can't find id_rsa.pub in the same
	# directory).  And if we run it on a certificate, it doesn't
	# matter whether there are related filenames in the same
	# directory; it will find the public key within the
	# certificate and print the fingerprint of that.

	# If we run "ssh-keygen -L", it will print a certificate's
	# information and throw an error if the file isn't a
	# certificate.

	# So the strategy must be:

	# If the potential key doesn't have a .opts file, skip it --
	# the scripts that put keys in $KEY_SPOOL should always write
	# a .opts file.
	if [[ ! -e $i.opts ]]; then
	    continue
	fi

	# If the potential key doesn't have a .written file, skip it
	# -- the scripts that put keys in $KEY_SPOOL write a
	# zero-length .written file when their data is all ready for
	# this daemon to pick it up.
	if [[ ! -e $i.written ]]; then
	    continue
	fi

	# If it's a certificate, ignore it.
	if ssh-keygen -L -f $i >& /dev/null; then
	    continue
	fi

	# 2. If ssh-keygen can't find its fingerprint, ignore it.
	if ! ssh-keygen -l -f $i >& /dev/null; then
	    continue
	fi

	# 3. At this point, either it's a public key, or it's a
	# private key with a public key existing in the same directory
	# whose name is $i.pub.  See if a $i.pub exists, and if it
	# does, ignore $i if its fingerprint matches $i.pub's.  If no
	# $i.pub exists, we're fine.  If $i.pub exists, but its
	# fingerprint differs from $i's, then we have a weird
	# situation where two public keys exist with one's filename
	# consisting of the other's with .pub appended.  Odd, but OK.
	if [[ -e $i.pub ]]; then
	    fingerprint1=`ssh-keygen -l -f $i`
	    fingerprint2=`ssh-keygen -l -f $i.pub`
	    if [[ $fingerprint1 == $fingerprint2 ]]; then
		continue
	    fi
	fi

	# We really think that $i is a public key.  Is it already
	# signed?  The easy way is to look for a "done file," which is
	# a zero-size file that this script writes after signing a
	# public key.  It's name consists of $i.done.
	if [[ -e $i.done ]]; then
	    continue
	fi

	# Suppose there's more than one key in it.  What do?  Skip.
	# It's an improper file.
	lines=`wc -l $i | cut -d ' ' -f 1`
	if [[ $lines -ne 1 ]]; then
	    continue
	fi

	# Every reason why the key shouldn't be signed has been
	# exhausted.
	sign_cert $i
    done
}

function read_opts_file() {
    # To be called from sign_cert, get the ssh-keygen command-line
    # options that must be stored in $1.opts.  The scripts that put
    # keys in $KEY_SPOOL put that file there, and this function will
    # never be called unless that file exists.  As a side effect, sets
    # $OPT_h, $OPT_I, etc.

    local key="$1" ifsave="$IFS" opt
    eval set -- $(< $key.opts)
    IFS=""
    # Clear whatever values were left from the last key signed
    OPT_h=
    OPT_I=
    OPT_n=
    OPT_O=
    OPT_V=
    # Reset getopts
    OPTIND=1
    while getopts ":hI:n:O:V:" opt; do
#	logger -i -t casignd "DEBUG: $OPTIND $opt $OPTARG"
	case "$opt" in
	    h)
		OPT_h=-h
		;;
	    I)
		OPT_I="-I ${OPTARG// /_}"
		;;
	    n)
		OPT_n="-n $OPTARG"
		;;
	    O)
		OPT_O="$OPT_O -O $OPTARG"
		;;
	    V)
		OPT_V="-V $OPTARG"
		;;
	    :)
		logger -i -t casignd "Missing parameter to option -$OPTARG"
		;;
	    ?)
		logger -i -t casignd "Unknown option -$OPTARG"
		;;
	    *)
		logger -i -t casignd "Unhandled option -$opt"
		;;
	esac
    done
    IFS="$ifsave"
}

function expire_spool_files() {
    # Delete any files in $KEY_SPOOL that are more than $EXPIRE minutes old.
    find $KEY_SPOOL -mindepth 1 -mmin +$EXPIRE -delete
}

function sign_cert() {
    # Signs the given key, turning it into a certificate.  Write a "done file" when done.
    local key=$1 ifsave="$IFS"
    local fingerprint=`/usr/bin/ssh-keygen -l -f $key`

    # Read the options file, which must exist or we wouldn't be here.
    # Sets the $OPT_* global variables.
    read_opts_file $key

    IFS="$ifsave"
    # Now we run some tests to make sure we should really sign this key.
    if [[ $OPT_h ]]; then	# Host keys
	# The key file must be owned by $AUSR.
	local fileowner=`stat -c %U $key`
	if [[ $fileowner != $AUSR ]]; then
	    logger -i -t casign "Submitted key $key not owned by authorized user.  Not signing key."
	    write_done $key
	    return
	fi
    else			# User keys
	local user=${OPT_n#-n }
	# The user must exist and be in the $AGRP group, or the key doesn't get signed.
	if ! id $user; then
	    logger -i -t casign "User key principal '$user' does not exist.  Not signing key."
	    write_done $key
	    return
	fi
	local g found=0
	for g in `id -Gn $user`; do
	    if [[ $g == $AGRP ]]; then found=1; fi
	done
	if [[ ! $found ]]; then
	    logger -i -t casign "User key principal '$user' not in authorized group. Not signing key."
	    write_done $key
	    return
	fi
	# The user must own the file, too.  No submitting keys for someone else.
	local fileowner=`stat -c %U $key`
	if [[ $user != $fileowner ]]; then
	    logger -i -t casign "User key principal '$user' does not match owner of submitted key $key, who is '$fileowner'.  Not signing key."
	    write_done $key
	    return
	fi
    fi

    # At this point any possible objections have all been answered, so sign the key.
    logger -i -t casign "Signing an SSH key with fingerprint: $fingerprint"
    logger -i -t casign "Using signing options: $OPT_h $OPT_I $OPT_n $OPT_O $OPT_V"
    export SSH_ASKPASS=$CA_PWD_EXE
    local output=`DISPLAY='' /usr/bin/ssh-keygen -s $CA_KEY $OPT_h $OPT_I $OPT_n $OPT_O $OPT_V $key 2>&1`
    if [[ $? -eq 0 ]]; then
	chown --reference $key ${key%.pub}-cert.pub
    fi
    write_done $key
    logger -i -t casign "Output from ssh-keygen: $output"
}

function do_loop_tasks {
    # Do tasks that must be done every $SLEEP_TIME seconds.
    check_now
    expire_spool_files
}

function run_loop {
    # Run do_loop_tasks every $SLEEP_TIME seconds.
    while /bin/true; do
	do_loop_tasks
	sleep $SLEEP_TIME
    done
}

function write_done {
    # Write the .done file for the given key.
    local key=$1
    touch $key.done
    chown --reference $key $key.done
}

function finish {
    # Clean up and exit.
    expire_spool_files
    rm -f $PID_FILE
    logger -i -t casignd "Exiting."
    exit 0
}

function main {
    # Everything happens here.  This is in a function for easy daemonizing.
    init

    # For daemon purposes, we want the standard file handles pointed
    # at /dev/null and all other file handles closed.
    [[ -t 0 ]] && exec </dev/null
    [[ -t 1 ]] && exec >/dev/null
    [[ -t 2 ]] && exec 2>/dev/null
    eval exec {3..255}\>\&-

    run_loop
}

function write_and_disown {
    # Takes the PID of the newly-created child, writes it to
    # $PID_FILE, and disowns the process.
    local pid=$1
    
    # Write the PID to $PID_FILE.
    logger -i -t casignd "Starting with PID $pid."
    mkdir -p `dirname $PID_FILE`
    echo $pid > $PID_FILE
    disown -h $pid
}

###############################################################################
# Main script
###############################################################################

( main ) & write_and_disown $!
