#!/bin/bash

# Tom Lee <thomlee@indiana.edu>
# begun on 2008/04/09
# last modified 2017/07/13

# This file will be synchronized using puppet across all servers and should
# therefore contain only rules that should apply to all GOC servers.

# This file should not set any policies (iptables -P) or add any rules to any
# default chains (INPUT, OUTPUT, etc.).  Its purpose is to create subchains
# that can be called by subsequent scripts.  I am unaware of any ill effects of
# creating subchains that are never called from any default chains, so this
# file will result in these subchains being available on all GOC servers for
# later scripts to use if required.  See /etc/iptables.d/README for more
# information.

# Please note:

# >> Nothing in this file has any direct effect on the firewall's behavior! <<

# It may set environment variables, and it may create user-defined subchains,
# but this file doesn't and shouldn't change any of the default tables or
# chains.  User-defined chains have no effect unless called from one of the
# default tables' chains!  There are global rules (see 30-global-rules) that
# call some of these chains, but those rules are not in this file.

###############################################################################
# Preparation
###############################################################################

. /etc/iptables.d/setup

# The WCC/Data Center VLAN (259)
VLAN_259_RANGE=2001:18e8:2:6::/64
VLAN_259_RANGE_v4=129.79.53.0/24

# The private VLAN (4020)
#
# IPv6.  Generated 5 random octets for our ULA (2F 6F EB 00 37).  We could thus
# theoretically use (addresses fully spelled out)
# fd2f:6feb:0037:0000:0000:0000:0000:0000 through
# fd2f:6feb:0037:ffff:ffff:ffff:ffff:ffff (~10^24 addresses).  It's highly
# unlikely that we'll ever need this many, but I'm dividing these up into
# smaller segments for organizational purposes:
# fd2f:6feb:37::/64 -- physical machines
# fd2f:6feb:37:1::/64 -- virtual machines
# fd2f:6feb:37:2::/64 -- assigned VPN addresses
# fd2f:6feb:37:3::/64 -- DHCP address pool
# We could have 65,532 other segments for other categories, if we wanted.
VLAN_4020_RANGE=fd2f:6feb:37::/48
VLAN_4020_PHYSICAL=fd2f:6feb:37::/64
VLAN_4020_VM=fd2f:6feb:37:1::/64
VLAN_4020_VPN=fd2f:6feb:37:2::/64
VLAN_4020_DHCP=fd2f:6feb:37:3::/64

# IPv4. I arbitrarily chosen 192.168.96.0 through 192.168.99.255 as the IP
# range to use and divided it up into smaller segments, not that anything makes
# these distinctions currently, but it could if we needed it to.
VLAN_4020_RANGE_v4=192.168.96.0/22
VLAN_4020_PHYSICAL_v4=192.168.96.0/25
VLAN_4020_DHCP_v4=192.168.96.128/25
VLAN_4020_VM_v4=192.168.97.0/24
VLAN_4020_VPN_v4=192.168.99.0/24

# The IU Secure range (see http://kb.iu.edu/data/ayft.html for the latest)
# As of 2017/07/13

# Please note before allowing packets from this range that "secure" is a bit of
# a misnomer -- it's "secure" in the sense that one needs an IU
# account/passphrase to use the wifi access points that map to these addresses,
# but it's not secure to allow any packet from these ranges. Someone coming
# from one of these IPs could have a compromised computer running malware.
# They could also just be an outright hacker running hacking software. The
# entire IU community can use these IPs.

IU_SECURE_RANGES=( \
    2001:18e8:2:28b6::0/62 \
    2001:18e8:3:28b6::0/62 \
    )

IU_SECURE_RANGES_v4=( \
    149.160.128.0/18 \
    149.160.192.0/18 \
    149.161.128.0/18 \
    149.161.192.0/18 \
    149.162.128.0/19 \
    149.162.192.0/19 \
    149.162.224.0/19 \
    )

# The VPN range
# (an IPv6 range has not yet been allocated to us)
SSL_VPN_RANGE=
SSL_VPN_RANGE_v4=140.182.89.0/28

# GOC employees' workstations
# (most have not been allocated IPv6 addresses)
CPIPES_WORKSTATION=
CPIPES_WORKSTATION_v4=149.166.153.239/32
ECHISM_WORKSTATION=
ECHISM_WORKSTATION_v4=149.166.143.160/32
#HAYASHIS_HOME=
#HAYASHIS_HOME_v4=99.137.202.243/32
STEIGE_WORKSTATION=
STEIGE_WORKSTATION_v4=156.56.179.30/32
THOMLEE_RADIOFLYER=2001:18e8:2:11df::101/128
THOMLEE_RADIOFLYER_v4=156.56.179.32/32
THOMLEE_ETCHASKETCH=2001:18e8:2:11df::102/128
THOMLEE_ETCHASKETCH_v4=156.56.179.33/32

# Quarry
# (IPv6 information unknown)
QUARRY=
# (I'm told the headnodes are 149.165.230.1-8, but you can't mask for only
# those values in the fourth octet).
QUARRY_v4=149.165.230.0/28

# Big Red
# (IPv6 information unknown)
BIGRED=
# (I'm told the headnodes are 149.165.234.21-26, but you can't mask for only
# those values in the fourth octet).
BIGRED_v4=149.165.234.16/28

# UISO ranges: scans come from here.  If a machine doesn't allow packets from
# these ranges, that machine doesn't get scanned.  These are from
# https://scanner.uiso.iu.edu/faq.html .
UISO=()
UISO_v4=(10.79.16.0/26 10.79.217.0/27 10.79.72.0/27 10.79.72.32/28 \
	10.234.125.128/26 10.234.23.128/26)

# Untrusted eth1 hosts: Although we trust packets on the private VLAN from most
# hosts, the following hosts are less trustworthy.  Most of our hosts allow
# direct SSH connections only from certain IP addresses (see the known_hosts
# subchain), so any host that allows wider SSH access must go on this list.
# Also, most of our systems have shell accounts only for employees of our
# group; systems that allow wider shell access must go on this list.  Finally,
# most of our hosts have only a few TCP/UDP ports open; hosts that have no
# firewalling or a wide range of open ports must go on this list.
#
# Packets from these hosts should be treated as suspicious.  We may wish to
# listen to incoming connections from these hosts only on certain
# protocols/ports.  At some point I'd like to eliminate the private VLAN, and
# move toward using only the public VLAN (properly firewalled, of course), but
# for now we must be careful.
SUSPECT=()
SUSPECT_v4=()
#
# jump: Accepting ssh connections from the entire world, it is thus more
# susceptible to breakins.  We do run DenyHosts, so repeated attacks from the
# same IP won't work, but the risk is still there.
SUSPECT=("${SUSPECT[@]}" fd2f:6feb:37:1::13/128)
SUSPECT_v4=("${SUSPECT_v4[@]}" 192.168.97.19/32)
# jump2: see jump.
SUSPECT=("${SUSPECT[@]}" fd2f:6feb:37:1::62/128)
SUSPECT_v4=("${SUSPECT_v4[@]}" 192.168.97.98/32)
#
# glidein: Igor Sfiligoi <sfiligoi@fnal.gov>, Jeff Dost <jdost@ucsd.edu>, Tim
# Mortensen <tmortensen@ucsd.edu>, and potentially a cast of thousands have
# sysadmin rights on this machine.  The risk exists that their security
# practices are not even as careful as mine, and I'm not the greatest in the
# world.  We run DenyHosts on glidein, but apparently a wide range of ports
# have to be open and listening to the entire world, or the glidein service
# won't work.  I've tried to get them to let me install fail2ban, but my
# suggestion was rejected as "too brittle."  This is a scary server.
SUSPECT=("${SUSPECT[@]}" fd2f:6feb:37::e/128)
SUSPECT_v4=("${SUSPECT_v4[@]}" 192.168.96.14/32)
# glidein-itb: see glidein.
SUSPECT=("${SUSPECT[@]}" fd2f:6feb:37::d/128)
SUSPECT_v4=("${SUSPECT_v4[@]}" 192.168.96.13/32)
# glidein-int: see glidein.
SUSPECT=("${SUSPECT[@]}" fd2f:6feb:37:1::e/128)
SUSPECT_v4=("${SUSPECT_v4[@]}" 192.168.97.14/32)
#
# xd-login: Mats Rynge <rynge@isi.edu> administers this machine.  He has given
# shell access to people I don't have any idea who they are, and ssh access is
# open to the world.  (To be fair, it is GSISSH, so they do need to have
# certificates, but all we need is one stolen cert key.)  It also requires wide
# ranges of ports to be open to the world, or apparently the service won't
# work, and attempts to lock it down fall on deaf ears.  I have talked them
# into running DenyHosts, but they won't allow fail2ban.  Don't allow our
# entire network's security to be only as strong as this server's.
SUSPECT=("${SUSPECT[@]}" fd2f:6feb:37::1f/128)
SUSPECT_v4=("${SUSPECT_v4[@]}" 192.168.96.31/32)
#
# csiu-submit: We have set this server up with shell accounts for people
# outside our team (but still inside IU), but it looks as if we're going to
# allow access to others from IU as well, potentially a lot of others.  Ssh
# access will have to be open to the world, we will have to run DenyHosts, and
# probably fail2ban as well.  But what's more, I'd like to mark it as a
# suspicious server.
SUSPECT=("${SUSPECT[@]}" fd2f:6feb:37:1::3f/128)
SUSPECT_v4=("${SUSPECT_v4[@]}" 192.168.97.63/32)
#
# mtavares: BOSCO test VM for Michel Tavares
SUSPECT=("${SUSPECT[@]}" fd2f:6feb:37:1::53/128)
SUSPECT_v4=("${SUSPECT_v4[@]}" 192.168.97.83/32)

###############################################################################
# Subchains
###############################################################################

# NOTE that none of these chains has any effect unless called from one of the
# built-in chains (INPUT, OUTPUT, etc.)

# ALSO NOTE that chains that don't specify a protocol, interface,
# source IP, port, etc. can be used for any protocol, interface,
# source IP, port, etc. -- in other words, since known_ok specifies
# only source IPs but not protocols or ports, it could be used to
# allow ssh access as in
#
# iptables -t filter -A INPUT -p tcp --dport ssh -j known_ok
#
# or it could be used to allow other types of access as in this example:
#
# iptables -t filter -A INPUT -p tcp --dport https -j known_ok

# log_drop: An obvious and useful chain that logs the packet, then drops it

# Note: since the prefix is the only way to make iptables lines in the
# log look unique (there's no way to change the facility), any
# iptables log lines must start with the same string so they can be
# easily identified by scripts as well as rsyslog and syslog-ng.  I
# propose that they start with the obvious string "iptables".
$ITF -N log_drop
$ITF -A log_drop -m limit --limit 5/minute -j LOG --log-prefix "iptables_dropped: "
$ITF -A log_drop -j DROP
$ITF4 -N log_drop
$ITF4 -A log_drop -m limit --limit 5/minute -j LOG --log-prefix "iptables_dropped: "
$ITF4 -A log_drop -j DROP

# log_reject: Similar, but with REJECT
$ITF -N log_reject
$ITF -A log_reject -m limit --limit 5/minute -j LOG --log-prefix "iptables_rejected: "
$ITF -A log_reject -j REJECT
$ITF4 -N log_reject
$ITF4 -A log_reject -m limit --limit 5/minute -j LOG --log-prefix "iptables_rejected: "
$ITF4 -A log_reject -j REJECT

# log_accept: Logs the packet, then accepts it; good for debugging
$ITF -N log_accept
$ITF -A log_accept -m limit --limit 5/minute -j LOG --log-prefix "iptables_accepted: "
$ITF -A log_accept -j ACCEPT
$ITF4 -N log_accept
$ITF4 -A log_accept -m limit --limit 5/minute -j LOG --log-prefix "iptables_accepted: "
$ITF4 -A log_accept -j ACCEPT

# accept_unless_suspect: If the packet hails from a host on the $SUSPECT list,
# RETURN, but otherwise, ACCEPT the packet.  We want to ACCEPT all packets from
# the private VLAN, unless they're from $SUSPECT hosts, in which case they must
# run through the same gantlet as packets from the external network.
$ITF -N accept_unless_suspect
for r in "${SUSPECT[@]}"; do
    $ITF -A accept_unless_suspect -s "${r}" -j RETURN
done
# If the packet hasn't been weeded out yet, it must be from a host on the
# private VLAN but not on the suspect list.  Accept it now.
$ITF -A accept_unless_suspect -j ACCEPT

# IPv4 version of preceding
$ITF4 -N accept_unless_suspect
for r in "${SUSPECT_v4[@]}"; do
    $ITF4 -A accept_unless_suspect -s "${r}" -j RETURN
done
$ITF4 -A accept_unless_suspect -j ACCEPT

# handle_priv: Accept packets destined for private VLAN IPs, unless the
# accept_unless_suspect rule sends them back here.  If it does, return so they
# can be dealt with by further rules, just like packets from the Internet.
$ITF -N handle_priv
# If it's not destined for the private VLAN, don't handle it with this rule.
$ITF -A handle_priv ! -d $VLAN_4020_RANGE -j RETURN
# See if it's from a suspect host -- if not, ACCEPT, but if so, come back here.
$ITF -A handle_priv -j accept_unless_suspect
# This means it was from a suspect host -- return so further rules can handle
# it.
$ITF -A handle_priv -j RETURN

# IPv4 version of preceding
$ITF4 -N handle_priv
$ITF4 -A handle_priv ! -d $VLAN_4020_RANGE_v4 -j RETURN
$ITF4 -A handle_priv -j accept_unless_suspect
$ITF4 -A handle_priv -j RETURN

# Subchains to accept packets from specific known IPs

# The IUB VLAN:
subchain iub_vlan_ok $VLAN_259_RANGE
subchain4 iub_vlan_ok $VLAN_259_RANGE_v4

# The private VLAN:
subchain private_vlan_ok $VLAN_4020_RANGE
subchain4 private_vlan_ok $VLAN_4020_RANGE_v4

# Special case for jump/jump2 only:
$ITF -N jump_ok
$ITF -A jump_ok -s fd2f:6feb:37:1::13/128 -j ACCEPT
$ITF -A jump_ok -s fd2f:6feb:37:1::62/128 -j ACCEPT
$ITF -A jump_ok -j RETURN

$ITF4 -N jump_ok
$ITF4 -A jump_ok -s 192.168.97.19/32 -j ACCEPT
$ITF4 -A jump_ok -s 192.168.97.98/32 -j ACCEPT
$ITF4 -A jump_ok -j RETURN

# The IU Secure range (not secure in the sense of safe to admit because the
# level of security you admit if you allow packets from these ranges is equal
# to the lowest common denominator of the entire IU community; see note above):
$ITF -N iu_secure_ok
for iu_secure_range in "${IU_SECURE_RANGES[@]}"; do
    $ITF -A iu_secure_ok -s ${iu_secure_range} -j ACCEPT
done
$ITF -A iu_secure_ok -j RETURN
$ITF4 -N iu_secure_ok
for iu_secure_range in "${IU_SECURE_RANGES_v4[@]}"; do
    $ITF4 -A iu_secure_ok -s ${iu_secure_range} -j ACCEPT
done
$ITF4 -A iu_secure_ok -j RETURN

# The GOC VPN range:
subchain ssl_vpn_ok $SSL_VPN_RANGE
subchain4 ssl_vpn_ok $SSL_VPN_RANGE_v4

# GOC employees' servers:

# Chris's desktop
subchain cpipes_workstation_ok $CPIPES_WORKSTATION
subchain4 cpipes_workstation_ok $CPIPES_WORKSTATION_v4

# Elizabeth's desktop
subchain echism_workstation_ok $ECHISM_WORKSTATION
subchain4 echism_workstation_ok $ECHISM_WORKSTATION_v4

# Soichi's IPs
#subchain hayashis_home_ok $HAYASHIS_HOME
#subchain4 hayashis_home_ok $HAYASHIS_HOME_v4

# Scott's desktop
subchain steige_workstation_ok $STEIGE_WORKSTATION
subchain4 steige_workstation_ok $STEIGE_WORKSTATION_v4

# Tom's machines
subchain thomlee_radioflyer_ok $THOMLEE_RADIOFLYER
subchain4 thomlee_radioflyer_ok $THOMLEE_RADIOFLYER_v4
subchain thomlee_etchasketch_ok $THOMLEE_ETCHASKETCH
subchain4 thomlee_etchasketch_ok $THOMLEE_ETCHASKETCH_v4

# Soichi's dynamic DNS (this will be populated later by a script, but we need a
# placeholder rule now):
$ITF -N hayashis_dyn_dns_ok
$ITF -A hayashis_dyn_dns_ok -j RETURN
$ITF4 -N hayashis_dyn_dns_ok
$ITF4 -A hayashis_dyn_dns_ok -j RETURN

# Scott's dynamic DNS (again, placeholder):
$ITF -N steige_dyn_dns_ok
$ITF -A steige_dyn_dns_ok -j RETURN
$ITF4 -N steige_dyn_dns_ok
$ITF4 -A steige_dyn_dns_ok -j RETURN

# Tom's dynamic DNS (again, placeholder):
$ITF -N thomlee_dyn_dns_ok
$ITF -A thomlee_dyn_dns_ok -j RETURN
$ITF4 -N thomlee_dyn_dns_ok
$ITF4 -A thomlee_dyn_dns_ok -j RETURN

# Subchain to call subchains for dynamic DNS IPs:
$ITF -N dyn_dns_ok
$ITF -A dyn_dns_ok -j hayashis_dyn_dns_ok
$ITF -A dyn_dns_ok -j steige_dyn_dns_ok
$ITF -A dyn_dns_ok -j thomlee_dyn_dns_ok
$ITF -A dyn_dns_ok -j RETURN
# IPv4:
$ITF4 -N dyn_dns_ok
$ITF4 -A dyn_dns_ok -j hayashis_dyn_dns_ok
$ITF4 -A dyn_dns_ok -j steige_dyn_dns_ok
$ITF4 -A dyn_dns_ok -j thomlee_dyn_dns_ok
$ITF4 -A dyn_dns_ok -j RETURN

# icmp_ok: Accept all ICMP packets, with ping flood protection
$ITF -N icmp_ok
$ITF -A icmp_ok -p icmpv6 --icmpv6-type echo-request -m limit --limit 3/s -j ACCEPT
$ITF -A icmp_ok -p icmpv6 --icmpv6-type echo-request -m limit --limit 5/minute -j LOG --log-prefix "iptables_ping_flood: "
$ITF -A icmp_ok -p icmpv6 --icmpv6-type echo-request -m limit --limit 5/minute -j REJECT
$ITF -A icmp_ok -p icmpv6 --icmpv6-type echo-request -j DROP
$ITF -A icmp_ok -p icmpv6 -j ACCEPT
$ITF -A icmp_ok -j RETURN
# And IPv4
$ITF4 -N icmp_ok
$ITF4 -A icmp_ok -p icmp --icmp-type echo-request -m limit --limit 3/s -j ACCEPT
$ITF4 -A icmp_ok -p icmp --icmp-type echo-request -m limit --limit 5/minute -j LOG --log-prefix "iptables_ping_flood: "
$ITF4 -A icmp_ok -p icmp --icmp-type echo-request -m limit --limit 5/minute -j REJECT
$ITF4 -A icmp_ok -p icmp --icmp-type echo-request -j DROP
$ITF4 -A icmp_ok -p icmp -j ACCEPT
$ITF4 -A icmp_ok -j RETURN

# web_ok: Accept http/https packets
$ITF -N web_ok
$ITF -A web_ok -p tcp --dport http -j ACCEPT
$ITF -A web_ok -p tcp --dport https -j ACCEPT
$ITF -A web_ok -j RETURN
# IPv4
$ITF4 -N web_ok
$ITF4 -A web_ok -p tcp --dport http -j ACCEPT
$ITF4 -A web_ok -p tcp --dport https -j ACCEPT
$ITF4 -A web_ok -j RETURN

# alt_web_ok: Accept packets on "alternate" http and https ports, 8080 and 8443
$ITF -N alt_web_ok
$ITF -A alt_web_ok -p tcp --dport 8080 -j ACCEPT
$ITF -A alt_web_ok -p tcp --dport 8443 -j ACCEPT
$ITF -A alt_web_ok -j RETURN
# IPv4
$ITF4 -N alt_web_ok
$ITF4 -A alt_web_ok -p tcp --dport 8080 -j ACCEPT
$ITF4 -A alt_web_ok -p tcp --dport 8443 -j ACCEPT
$ITF4 -A alt_web_ok -j RETURN

# cemon_ok: Accept CEMon packets
$ITF -N cemon_ok
$ITF -A cemon_ok -p tcp --dport 14001 -j ACCEPT
$ITF -A cemon_ok -j RETURN
# IPv4
$ITF4 -N cemon_ok
$ITF4 -A cemon_ok -p tcp --dport 14001 -j ACCEPT
$ITF4 -A cemon_ok -j RETURN

# bdii_ok: Accept BDII packets
$ITF -N bdii_ok
$ITF -A bdii_ok -p tcp --dport 2170:2172 -j ACCEPT
$ITF -A bdii_ok -j RETURN
# IPv4
$ITF4 -N bdii_ok
$ITF4 -A bdii_ok -p tcp --dport 2170:2172 -j ACCEPT
$ITF4 -A bdii_ok -j RETURN

# bdii_intop_ok: Accept INTOP BDII packets
$ITF -N bdii_intop_ok
$ITF -A bdii_intop_ok -p tcp --dport 2180:2182 -j ACCEPT
$ITF -A bdii_intop_ok -j RETURN
# IPv4
$ITF4 -N bdii_intop_ok
$ITF4 -A bdii_intop_ok -p tcp --dport 2180:2182 -j ACCEPT
$ITF4 -A bdii_intop_ok -j RETURN

# Allow Gratia Collector: Tomcat http and https, as well as MySQL server
$ITF -N gratia_ok
$ITF -A gratia_ok -p tcp --dport 8880 -j ACCEPT
$ITF -A gratia_ok -p tcp --dport 8443 -j ACCEPT
$ITF -A gratia_ok -p tcp --dport 49152 -j ACCEPT
$ITF -A gratia_ok -j RETURN
# IPv4
$ITF4 -N gratia_ok
$ITF4 -A gratia_ok -p tcp --dport 8880 -j ACCEPT
$ITF4 -A gratia_ok -p tcp --dport 8443 -j ACCEPT
$ITF4 -A gratia_ok -p tcp --dport 49152 -j ACCEPT
$ITF4 -A gratia_ok -j RETURN

# Allow packets on default MySQL port
$ITF -N mysql_ok
$ITF -A mysql_ok -p tcp --dport 3306 -j ACCEPT
$ITF -A mysql_ok -j RETURN
# IPv4
$ITF4 -N mysql_ok
$ITF4 -A mysql_ok -p tcp --dport 3306 -j ACCEPT
$ITF4 -A mysql_ok -j RETURN

# Allow packets on VDT MySQL port
$ITF -N mysql_vdt_ok
$ITF -A mysql_vdt_ok -p tcp --dport 49152 -j ACCEPT
$ITF -A mysql_vdt_ok -j RETURN
# IPv4
$ITF4 -N mysql_vdt_ok
$ITF4 -A mysql_vdt_ok -p tcp --dport 49152 -j ACCEPT
$ITF4 -A mysql_vdt_ok -j RETURN

# Temporary Globus work
$ITF -N globus_temp_ok
$ITF -A globus_temp_ok -p tcp --dport 40000:44999 -j ACCEPT
$ITF -A globus_temp_ok -j RETURN
# IPv4
$ITF4 -N globus_temp_ok
$ITF4 -A globus_temp_ok -p tcp --dport 40000:44999 -j ACCEPT
$ITF4 -A globus_temp_ok -j RETURN

# grnoc_any_ok: Accept packets from the GRNOC Nagios server
$ITF -N grnoc_any_ok
# Rules can go here once we have IPv6 addresses for GRNOC
$ITF -A grnoc_any_ok -j RETURN
# IPv4
$ITF4 -N grnoc_any_ok
$ITF4 -A grnoc_any_ok -s 149.165.129.24/32 -j ACCEPT
$ITF4 -A grnoc_any_ok -s 140.182.45.6/32 -j ACCEPT
$ITF4 -A grnoc_any_ok -s 140.182.44.7/32 -j ACCEPT
$ITF4 -A grnoc_any_ok -j RETURN

# grnoc_ok: Accepts ssh packets from GRNOC (the usual case)
$ITF -N grnoc_ok
$ITF -A grnoc_ok -p tcp --dport ssh -j grnoc_any_ok
$ITF -A grnoc_ok -j RETURN
# IPv4
$ITF4 -N grnoc_ok
$ITF4 -A grnoc_ok -p tcp --dport ssh -j grnoc_any_ok
$ITF4 -A grnoc_ok -j RETURN

# tsm_ok: Allow TSM backups to work
$ITF -N tsm_ok
# Rules can go here once we have IPv6 addresses for TSM
$ITF -A tsm_ok -j RETURN
# IPv4
TSM_v4=156.56.12.0/24
$ITF4 -N tsm_ok
$ITF4 -A tsm_ok -s $TSM_v4 -p tcp --dport 1581 -j ACCEPT
$ITF4 -A tsm_ok -s $TSM_v4 -p tcp --dport 2123:2124 -j ACCEPT
$ITF4 -A tsm_ok -j RETURN

# mdss_ok: Allow HSI callbacks from MDSS to work
$ITF -N mdss_ok
# Rules can go here once we have IPv6 addresses for MDSS
$ITF -A mdss_ok -j RETURN
# IPv4
MDSS_v4=149.165.226.0/29
$ITF4 -N mdss_ok
$ITF4 -A mdss_ok -s $MDSS_v4 -p tcp -j ACCEPT
$ITF4 -A mdss_ok -j RETURN

# voms_ok: Allow packets on VOMS ports
$ITF -N voms_ok
$ITF -A voms_ok -p tcp --dport 15001:15030 -j ACCEPT
$ITF -A voms_ok -j RETURN
# IPv4
$ITF4 -N voms_ok
$ITF4 -A voms_ok -p tcp --dport 15001:15030 -j ACCEPT
$ITF4 -A voms_ok -j RETURN

# known_ok: Accept packets from certain hosts only
$ITF -N known_ok
$ITF -A known_ok -j iub_vlan_ok
$ITF -A known_ok -j ssl_vpn_ok
$ITF -A known_ok -j cpipes_workstation_ok
$ITF -A known_ok -j echism_workstation_ok
#$ITF -A known_ok -j hayashis_home_ok
$ITF -A known_ok -j steige_workstation_ok
$ITF -A known_ok -j thomlee_radioflyer_ok
$ITF -A known_ok -j thomlee_etchasketch_ok
$ITF -A known_ok -j dyn_dns_ok
$ITF -A known_ok -j RETURN
# IPv4
$ITF4 -N known_ok
$ITF4 -A known_ok -j iub_vlan_ok
$ITF4 -A known_ok -j ssl_vpn_ok
$ITF4 -A known_ok -j cpipes_workstation_ok
$ITF4 -A known_ok -j echism_workstation_ok
#$ITF4 -A known_ok -j hayashis_home_ok
$ITF4 -A known_ok -j steige_workstation_ok
$ITF4 -A known_ok -j thomlee_radioflyer_ok
$ITF4 -A known_ok -j thomlee_etchasketch_ok
$ITF4 -A known_ok -j dyn_dns_ok
$ITF4 -A known_ok -j RETURN

# vmware_server_ok: Allow VMWare Server Console (known hosts)
$ITF -N vmware_known_ok
$ITF -A vmware_known_ok -p tcp --dport 904 -j known_ok
$ITF -A vmware_known_ok -j RETURN
# IPv4
$ITF4 -N vmware_known_ok
$ITF4 -A vmware_known_ok -p tcp --dport 904 -j known_ok
$ITF4 -A vmware_known_ok -j RETURN

# globus_gatekeeper_ok: Allows Globus Gatekeeper
$ITF -N globus_gatekeeper_ok
$ITF -A globus_gatekeeper_ok -p tcp --dport 2119 -j ACCEPT
$ITF -A globus_gatekeeper_ok -p tcp --dport 2811 -j ACCEPT
$ITF -A globus_gatekeeper_ok -j RETURN
# IPv4
$ITF4 -N globus_gatekeeper_ok
$ITF4 -A globus_gatekeeper_ok -p tcp --dport 2119 -j ACCEPT
$ITF4 -A globus_gatekeeper_ok -p tcp --dport 2811 -j ACCEPT
$ITF4 -A globus_gatekeeper_ok -j RETURN

# quarry_ok: Allows packets from $QUARRY
$ITF -N quarry_ok
# Rules can go here once we have an IPv6 address for Quarry
$ITF -A quarry_ok -j RETURN
# IPv4
$ITF4 -N quarry_ok
$ITF4 -A quarry_ok -s $QUARRY_v4 -j ACCEPT
$ITF4 -A quarry_ok -j RETURN

# bigred_ok: Allows packets from $BIGRED
$ITF -N bigred_ok
# Rules can go here once we have an IPv6 address for Big Red
$ITF -A bigred_ok -j RETURN
# IPv4
$ITF4 -N bigred_ok
$ITF4 -A bigred_ok -s $BIGRED_v4 -j ACCEPT
$ITF4 -A bigred_ok -j RETURN

# uiso_ok: Allows packets from the UISO ranges
$ITF -N uiso_ok
for r in "${UISO[@]}"; do
    $ITF -A uiso_ok -s "${r}" -j ACCEPT
done
$ITF -A uiso_ok -j RETURN
# IPv4
$ITF4 -N uiso_ok
for r in "${UISO_v4[@]}"; do
    $ITF4 -A uiso_ok -s "${r}" -j ACCEPT
done
$ITF4 -A uiso_ok -j RETURN

# global_blacklist: Absolutely deny all packets from these hosts/ranges
$ITF -N global_blacklist
# Put IPv6 addresses to blacklist here
$ITF -A global_blacklist -j RETURN
# IPv4
$ITF4 -N global_blacklist
# win.spammer.ro
$ITF4 -A global_blacklist -s 109.163.231.144/32 -j DROP
$ITF4 -A global_blacklist -s 182.178.67.211/32 -j DROP
# web1 DoS attack of June 2016
$ITF4 -A global_blacklist -s 191.96.249.53/32 -j DROP
$ITF4 -A global_blacklist -s 191.96.249.54/32 -j DROP
$ITF4 -A global_blacklist -j RETURN

# cast_ok: Accept broadcast/multicast
$ITF -N cast_ok
$ITF -A cast_ok -d ff00::/8 -j ACCEPT
$ITF -A cast_ok -j RETURN
# IPv4
$ITF4 -N cast_ok
$ITF4 -A cast_ok -d 0.0.0.255/0.0.0.255 -j ACCEPT
$ITF4 -A cast_ok -d 224.0.0.0/24 -j ACCEPT
$ITF4 -A cast_ok -j RETURN

# cast_drop: Drop broadcast/multicast
$ITF -N cast_drop
$ITF -A cast_drop -d ff00::/8 -j DROP
$ITF -A cast_drop -j RETURN
# IPv4
$ITF4 -N cast_drop
$ITF4 -A cast_drop -d 0.0.0.255/0.0.0.255 -j DROP
$ITF4 -A cast_drop -d 224.0.0.0/24 -j DROP
$ITF4 -A cast_drop -j RETURN

# Flood protection:

# -m limit: load limit module, which admits packets that don't exceed the rate
# limit.  Parameters:
#
# --limit <num>/<time unit>: specifies average rate.  Packets arriving at a
# rate higher than this will not be matched.  <time unit> can be s/m/h/d.  For
# example, '5/s' means 5 packets per second, while '1/m' means 1 packet per
# minute.  '60/h' and '1/m' will result in the same behavior.  The default is
# '3/h'.
#
# --limit-burst <num>: allows a burst of <num> packets before invoking the
# above limit.  The default is '5'.  There is a burst counter, which I'll call
# B, that starts at <num> and decreases by 1 each time a packet comes in and
# increases by 1 each time no packet matches the --limit.  If the counter
# reaches 0, the --limit-burst will not match.
#
# The default behavior (--limit 3/h --limit-burst 5) means that the burst
# counter B is initialized to 5, and once a packet matches, B becomes 4 and an
# increment schedule is set up: every 20 minutes, B is incremented by 1.  If B
# reaches 5, the schedule is deleted.  However, if more packets come in, B is
# decremented each time, and once B reaches 0, no more packets will be matched
# until B has been incremented to at least 1 again.  If one packet is coming in
# per minute, this would mean that the rule would match the first five packets
# (each one incrementing B), then it would stop matching.  Then, 16 minutes
# later (20 minutes after the first packet), B would be incremented to 1, one
# packet would be matched, B would go back to 0, and then the rule would stop
# matching again for the next 20 minutes.  Every 20 minutes thereafter, one
# packet would be matched.
#
# So if you use "--limit 1/m --limit-burst 1", the rule will match once per
# minute.  Once a packet is matched, it will literally be at least a minute
# before another one is.  However, with "--limit 1/m --limit-burst 2", the rule
# will match 2 packets before it stops matching for a minute.  The difference
# between "--limit 1/m --limit-burst 2" and "--limit 2/m --limit-burst 1" is
# easily seen if you imagine an incoming sequence of packets, one per second.
#
# --limit 1/m --limit-burst 2: This will match the first two packets, then
# cease matching for a full minute (actually for 59 seconds, or 60 seconds
# after receiving the first packet), then match one packet per minute.
#
# --limit 2/m --limit-burst 1: This will match a single packet, cease matching
# for 30 seconds, then match another packet, matching one packet per 30
# seconds.
#
# The reciprocal of the --limit parameter is the amount of "off-time" there
# will be if the rate is exceeded.
#
# Note that this controls how often packets are matched, not how often they're
# accepted, rejected or dropped.  To use this module for flood protection, you
# should probably either negate it and have matches jump to the DROP or REJECT
# chain, or have the limit rule jump to the ACCEPT chain and follow it with a
# rule that DROPs or REJECTs anything that the limit rule didn't match.  (Or
# put it in a subchain and have matches jump to the RETURN chain, followed by a
# DROP/REJECT.)  If you want to log anything (and you probably would want to
# put a limit on the log messages too, to avoid DoS attacks that attempt to
# fill log volumes), you would have to use the second approach and put your
# logging rules between the ACCEPT and DROP/REJECT rules.
#
# There is a separate burst counter per rule, just as there is obviously a
# separate limit rate per rule, so you can have multiple instances of this
# limiting mechanism in your firewall tables.  However, I do not believe that
# there is a separate burst counter per source IP address, so this doesn't and
# can't protect a service against DoS attack; an attacker deliberately
# exceeding the rate limit will successfully prevent legitimate users from
# using the service.  It can prevent such an attacker from preventing the use
# of all services on the host, however, unless they attack all services
# simultaneously.
#
# In this case we want to protect against TCP SYN flooding.  First we'll RETURN
# if the packet isn't a TCP SYN packet.
$ITF -N tcp_syn_flood_protect
# Don't consider any non-TCP packets
$ITF -A tcp_syn_flood_protect ! -p tcp -j RETURN
# Don't consider any TCP packets without the SYN flag
$ITF -A tcp_syn_flood_protect -p tcp ! --syn -j RETURN
# More than 200 attempted connections in a second and it won't match
$ITF -A tcp_syn_flood_protect -m limit --limit 200/s --limit-burst 5 -j RETURN
# Drop anything that wasn't matched (i.e. came in too fast)
$ITF -A tcp_syn_flood_protect -j DROP

# And a similar rule for IPv4
$ITF4 -N tcp_syn_flood_protect
$ITF4 -A tcp_syn_flood_protect ! -p tcp -j RETURN
$ITF4 -A tcp_syn_flood_protect -p tcp ! --syn -j RETURN
$ITF4 -A tcp_syn_flood_protect -m limit --limit 200/s --limit-burst 5 -j RETURN
$ITF4 -A tcp_syn_flood_protect -j DROP
