## /etc/ldap.conf template for RHEL 5
#raw
# This is the configuration file for nss_ldap and pam_ldap (type 'man nss_ldap'
# or 'man pam_ldap' for documentation).  Note that this configuration file is
# NOT used for anything else, most notibly LDAP clients like OpenLDAP's
# ldapsearch and the like.  Such clients ignore this file (OpenLDAP uses
# /etc/openldap/ldap.conf, and beware of this, because typing 'man ldap.conf'
# will give you documentation about that file, not this one -- they have the
# same syntax and similar but not identical options).

# To clarify, nss_ldap is the library that is affected by /etc/nsswitch.conf;
# any LDAP search initiated due to that file's settings will come here for its
# settings.  This includes passwd, shadow, group, hosts, and any other searches
# configured in nsswitch.conf.  See 'man nsswitch.conf' for more details.

# On the other hand, pam_ldap is the library used by the PAM system for
# authentication to get its information from an LDAP server.  It also uses this
# file, and it responds to some of the same options as nss_ldap, but it has a
# few options unique to pam_ldap (these options tend to start with "pam_").
# But nss_ldap and pam_ldap are both written so as to ignore any options in
# this file that they don't understand, each assuming that the options belong
# to the other, as long as they're formatted in the right way.

# A strange thing I've discovered is that nss_ldap (and possibly pam_ldap)
# apparently read /etc/openldap/ldap.conf before reading this file, so any
# settings in that file will take effect, although they will be overridden if
# the same setting appears in this file with a different value.

# An LDAP query has three steps: connect, bind, and request/response.  Connect
# just means making a connection from client to server, whether it be TCP, UDP,
# etc.  Binding means authenticating to the LDAP server so as to get permission
# to send a request -- obviously there must be a connection first.  Sometimes
# binding is trivial, when anonymous access is sufficient for retrieving data
# from the server.  Then, finally, assuming the previous two steps have
# happened, the client sends its request and gets its response.

# The timelimit (seconds) to use when connecting to the LDAP server.  This only
# has an effect when connecting to the server, not when making requests.  Not
# all client software supports this.  Default is 30 seconds.
bind_timelimit 10

# Specifies the policy to use for reconnecting to an unavailable LDAP server.
# "hard_open" (default) attempts to reconnect if the connection couldn't be
# opened.  On the other hand, "hard_init" attempts to reconnect if the
# connection couldn't even be initialized, which is an earlier step that takes
# place before the connection is attempted; it's possible for initialization to
# fail because of a malformed configuration file, for example.  Both "hard"
# policies block with exponential backoff before retrying.  Then there is
# "soft," which does not retry but instead returns immediately on failure to
# connect (This is the "Yoda" option -- as in, "Do or do not, there is no
# retry").  The problem with this option is even one momentary, transitory
# failure to connect appears to a user as if they've been deleted from the
# system, and they will complain exactly 1 second later (and there's no setting
# you can use to increase that time!).
bind_policy hard_open

# The timelimit (seconds) to use when making requests.  The default is 0
# seconds, which means to wait indefinitely.
timelimit 5

# Suggested by
# http://www.pantz.org/software/ldap/ldap_issues_with_local_logins_and_dbus.html,
# the following settings will also crack down on how long libnss waits when the
# server doesn't respond.
nss_reconnect_tries 1         # no. of times to double the sleep time
nss_reconnect_sleeptime 1     # initial sleep value
nss_reconnect_maxsleeptime 1  # max sleep value to cap at
nss_reconnect_maxconntries 3  # how many tries before sleeping
# This leads to a delay of 3 seconds per lookup if the server is not available.

# When the system message bus daemon (dbus-daemon) starts up, it is run as the
# user "dbus".  This means that nss must look up the user "dbus" at that time
# and discover what groups it's in.  Unfortunately, if you use LDAP or any
# other networked authentication, this interacts with an unfortunate misfeature
# of libnss -- even if you have /etc/nsswitch.conf set to look up users and
# their groups in "files" before "ldap", libnss will still assume that if it
# doesn't find a user in a local group, that user may still be a member of a
# group in LDAP.  This can be bad when you're trying to login or run a process
# as root, dbus, or any number of other system users when the LDAP server is
# unavailable (either it's down, or networking hasn't started yet, or hasn't
# started correctly).  So we exclude system users from the search -- it would
# be insane to put system users on a networked authentication server anyway.
# The following option tells nss_ldap to automatically return "not found" if it
# is asked to look up any of the listed users.  Beware what might happen if
# more system users are added.
nss_initgroups_ignoreusers root,bin,daemon,adm,lp,sync,shutdown,halt,mail,uucp,operator,games,gopher,ftp,nobody,dbus,oprofile,vcsa,avahi-autoipd,ntp,qemu,polkituser,rpc,rpcuser,nfsnobody,rtkit,distcache,nscd,tcpdump,avahi,apache,mailnull,smmsp,openvpn,named,smolt,webalizer,nm-openconnect,postgres,sshd,postfix,dovecot,torrent,pulse,haldaemon,mysql,hsqldb,jetty,exim,squid,backuppc,news,gdm,tomcat

# Whether to keep the LDAP connection open or to close it after the query is
# done. The default is "persist", which keeps the connection open, but this can
# result in a lot of connections, especially on a very busy server.
nss_connect_policy oneshot

# How long (in seconds) to keep an idle connection open before closing it.  The
# default is 0 seconds, which means never to close idle connections at all.
# Not closing idle connections is a bad policy that gets progressively worse
# the longer this host stays up, because sooner or later you'll run into the
# open sockets limit.
idle_timelimit 30

# The URI of the LDAP server.  Should be ldap://<ipaddr>[:<port>].  The default
# port is 389; that can be omitted if the server is listening on 389.  You can
# have more than one URI if they're separated by spaces, and the library will
# just move down the list if the first one doesn't respond.  Note that if the
# server responds but doesn't allow the client to bind, it will not failover.
# This is why we're concerning ourselves so much with timeouts -- if the server
# has too many connections, it may will get into a state where it can accept
# new connections, but can't allow new clients to bind.
uri ldap://192.168.96.4/ ldap://192.168.97.12/

# The base from which to construct the DN of every record that nss_ldap or
# pam_ldap will be searching for.
base dc=goc

# The DN of the "root" user.  Unless a client binds with this DN, they will
# have only read access.  The password to use is in /etc/ldap.secret, which
# should have mode 600.
rootbinddn cn=manager,dc=goc

# Whether to use SSL to encrypt the connection.  This should be set to "off"
# for no SSL, "on" for ldaps (which is deprecated), or "start_tls" for StartTLS
# (recommended).
ssl start_tls

# Where to look for CA certificates.  In order for SSL/TLS to work, we must
# have a certificate for whatever CA signed the LDAP server's certificate.
# This can be in a file (specify its path with the tls_cacert option) or in a
# directory (specify the directory with the tls_cacertdir option and make sure
# each CA cert in the directory has a hash link, which can be produced with a
# command such as
#
# ln -s cacert.pem `openssl x509 -noout -hash -in cacert.pem`.0
#
# and it's very hard to find directions for this, so I put them here for
# future reference).
tls_cacertdir /etc/pki/ldap

# Whether to perform referrals chasing by default.  This is reputed to prevent
# nscd from taking up runaway amounts of CPU.
referrals no

# A pam_ldap option; this specifies what protocol (and strategy) to use when a
# user changes his/her password.  'md5' means to generate a one-way MD5 hash of
# the user's password and to then store that in the user's record on the server
# via an LDAPModify request.
pam_password md5
#end raw