#!/usr/bin/perl -w

use strict;

# dellom_alertmail -- configure/send Dell OpenManage alerts
# Tom Lee <thomlee@indiana.edu>

# Note that you must have Dell OpenManage installed to use this.  Go to this
# link to install it.  http://linux.dell.com/wiki/index.php/Repository/hardware

# Here is the Support Matrix for OpenManage Server Administrator 6.3:
# http://support.dell.com/support/systemsinfo/document.aspx?c=us&cs=RC956904&l=en&s=hied&~file=/software/smsom/6.3/en/peosom/index.htm
# If you don't have a system that 6.3 supports, you may have to downgrade to an
# earlier version that does support the system in question.

# The following services must be running:

# One of: ipmi or dsm_sa_ipmi (ipmi is needed for Munin)
# dataeng
# dsm_om_shrsvc
# dsm_om_connsvc

# When called with the -s command line option, this script will set up
# OpenManage's email alerts for all events to point to this alertmail script
# with an appropriate command-line option telling it what to say in the email.

# Heavily based on DellAlert.vbs by Paul Murana; see
# http://www.tachytelic.net/2010/03/setting-up-e-mail-alerts-from-dell-openmanage-omsa/

use Getopt::Std qw(getopts);

###############################################################################
# Settings
###############################################################################

# Hostname
my $HOSTNAME = `hostname`;
chomp $HOSTNAME;

# Version
$main::VERSION = '1.0';

# Path
$ENV{'PATH'} = '/sbin:/bin:/usr/sbin:/usr/bin:/opt/sbin:/opt/bin:/usr/local/sbin:/usr/local/bin:/opt/dell/srvadmin/sbin';

# Addressee
#my $TO = 'thomlee@radioflyer.uits.indiana.edu';
my $TO = 'goc-alert@googlegroups.com';

# Options from the command line
my %opts = ();

# Alerts
my %alerts =
  (
   "powersupply" => "Power supply failure",
   "powersupplywarn" => "Power supply warning",
   "tempwarn" => "Temperature warning",
   "tempfail" => "Temperature failure",
   "fanwarn" => "Fan speed warning",
   "fanfail" => "Fan speed failure",
   "voltwarn" => "Voltage warning",
   "voltfail" => "Voltage failure",
   "intrusion" => "Chassis intrusion",
   "redundegrad" => "Redundancy degraded",
   "redunlost" => "Redundancy lost",
   "memprefail" => "Memory pre-failure",
   "memfail" => "Memory failure",
   "hardwarelogwarn" => "Hardware log warning",
   "hardwarelogfull" => "Hardware log full",
   "processorwarn" => "Processor warning",
   "processorfail" => "Processor failure",
   "watchdogasr" => "Watchdog ASR",
   "batterywarn" => "Battery warning",
   "batteryfail" => "Battery failure",
   "systempowerwarn" => "Power warning",
   "systempowerfail" => "Power failure",
#   "systempeakpower" => "Peak power",
   "removableflashmediapresent" => "Removable flash media present",
   "removableflashmediaremoved" => "Removable flash media removed",
   "removableflashmediafail" => "Removable flash media failure",
   "storagesyswarn" => "Storage System warning",
   "storagesysfail" => "Storage System failure",
   "storagectrlwarn" => "Storage Controller warning",
   "storagectrlfail" => "Storage Controller failure",
   "pdiskwarn" => "Physical Disk warning",
   "pdiskfail" => "Physical Disk failure",
   "vdiskwarn" => "Virtual Disk warning",
   "vdiskfail" => "Virtual Disk failure",
   "enclosurewarn" => "Enclosure warning",
   "enclosurefail" => "Enclosure failure",
   "storagectrlbatterywarn" => "Storage Controller Battery warning",
   "storagectrlbatteryfail" => "Storage Controller Battery failure",
   );

###############################################################################
# Subroutines
###############################################################################

sub main::HELP_MESSAGE() {
  # Print a useful help message.
  print <<EOT;
Usage: dellom_alertmail [options]
Options:
    -c: Configure OpenManage
    -e <alert symbol>: Send an email regarding given alert symbol
    -h: This help message
    -t: Send a test message
EOT
  ;
}

sub handle_opts() {
  # Handle the command-line options.
  $Getopt::Std::STANDARD_HELP_VERSION = 1;
  &getopts('ce:ht', \%opts);
}

sub configure_om() {
  # Configure OpenManage's email alerts with all the right messages.
  foreach my $symbol (keys(%alerts)) {
    my $alertcmd = sprintf('%s -e %s', $0, $symbol);
    my $cmd = sprintf('omconfig system alertaction event=%s alert=true broadcast=true execappath="%s"',
		      $symbol, $alertcmd);
    if((system($cmd) >> 8) != 0) {
      printf(STDERR "Problem configuring %s: %s\n", $symbol, $!);
    }
  }
}

sub send_mail($$) {
  # Send mail with the given subject and message to $TO.
  my($subj, $msg) = @_;

  open(SENDMAIL, "|sendmail $TO") or die("Cannot open sendmail: $!\n");
  print SENDMAIL <<"EOT";
Subject: $subj
Content-type: text/plain

$msg
EOT
  ;
  close(SENDMAIL);
}

sub send_test() {
  # Send a test message to $TO.
  &send_mail('Test message from dellom_alertmail',
	     "This is a test message from the dellom_alertmail script on $HOSTNAME.  This is only a test.");
}

sub handle_alert($) {
  # Handle an incoming alert message.
  my($symbol) = @_;

  &send_mail("OpenManage alert from $HOSTNAME: $symbol",
	     "OpenManage has generated an alert message on $HOSTNAME.\n\nThe message: $alerts{$symbol}");
}

###############################################################################
# Main
###############################################################################

&handle_opts();
if($opts{'h'}) {
  &HELP_MESSAGE();
  exit 0;
} elsif($opts{'c'}) {
  &configure_om();
} elsif($opts{'e'}) {
  &handle_alert($opts{'e'});
} elsif($opts{'t'}) {
  &send_test();
} else {
  &HELP_MESSAGE();
  exit 0;
}
