## This takes the place of the Cobbler-provided
## pre_install_network_config snippet.  The goal here is to:

## Do nothing if the profile was selected automatically via a system
## record, as opposed to manually selected from the PXE menu

## Generate /tmp/pre_install_network_config, consisting of one
## kickstart-style "network" line per physical interface

## Keep in mind that the Cobbler PXE server will, in nearly all cases,
## be on the VLAN that is connected to the second network adapter
## ($if02), not the first.

## Execute only if there is no system_name
#if $getVar("system_name", "") != ""

## Generate shell script
#raw
# generic functions to be used later for discovering NICs
mac_exists() {
  # Given a MAC address, return a true result if it exists
  [ -z "$1" ] && return 1

  if which ip 2>/dev/null >/dev/null; then
    ip -o link | grep -i "$1" 2>/dev/null >/dev/null
    return $?
  elif which esxcfg-nics 2>/dev/null >/dev/null; then
    esxcfg-nics -l | grep -i "$1" 2>/dev/null >/dev/null
    return $?
  else
    ifconfig -a | grep -i "$1" 2>/dev/null >/dev/null
    return $?
  fi
}
get_ifname() {
  # Given a MAC address, return the name of the interface
  if which ip 2>/dev/null >/dev/null; then
    IFNAME=$(ip -o link | grep -i "$1" | sed -e 's/^[0-9]*: //' -e 's/:.*//')
  elif which esxcfg-nics 2>/dev/null >/dev/null; then
    IFNAME=$(esxcfg-nics -l | grep -i "$1" | cut -d " " -f 1)
  else
    IFNAME=$(ifconfig -a | grep -i "$1" | cut -d " " -f 1)
    if [ -z $IFNAME ]; then
      IFNAME=$(ifconfig -a | grep -i -B 2 "$1" | sed -n '/flags/s/:.*$//p')
    fi
  fi
}
#end raw
  #set ikeys = $interfaces.keys()
  #import re
  #set $vlanpattern = $re.compile("[a-zA-Z0-9]+[\.][0-9]+")
  #set $routepattern = $re.compile("[0-9\.]+:[0-9.]+")
  ##
  ## Determine whether to use the MAC addresses to configure the
  ## interfaces first.  Note that only physical interfaces are
  ## required to have a MAC address, not bridges or bonded interfaces.
  #set $configbymac = True
  #for $iname in $ikeys
    #set $idata = $interfaces[$iname]
    #if $idata["mac_address"] == "" and not $vlanpattern.match($iname) and not $idata["interface_type"].lower() in ("master","bond","bridge","bonded_bridge_slave")
      #set $configbymac = False
    #end if
  #end for
  #set $i = 0

  #if $configbymac
    ## Output diagnostic message
# Start of code to match Cobbler system interfaces to physical
# interfaces by their mac addresses
  #end if
  #for $iname in $ikeys
# Start $iname
    #set $idata         = $interfaces[$iname]
    #set $mac           = $idata["mac_address"]
    #set $static        = $idata["static"]
    #set $ip            = $idata["ip_address"]
    #set $netmask       = $idata["netmask"]
    #set $iface_type    = $idata["interface_type"]
    #set $iface_master  = $idata["interface_master"]
    #set $static_routes = $idata["static_routes"]
    #set $devfile       = "/etc/sysconfig/network-scripts/ifcfg-" + $iname
    #if $vlanpattern.patch($iname)
      ## If this is a VLAN interface, skip it; Anaconda doesn't know
      ## about VLANs.
      #set $is_vlan = True
    #else
      #set $is_vlan = False
    #end if
    #if ($configbymac and not $is_vlan and $iface_type.lower() not in ("slave","bond_slave","bridge_slave","bonded_bridge_slave")) or $iface_type.lower() in ("master","bond","bridge")
      ## This is a physical interface; hand it to Anaconda.  Do not
      ## process slave interfaces here.
      #if $iface_type.lower() in ("master","bond","bridge","bonded_bridge_slave")
        ## Find a slave for this interface.
        #for $tiname in $ikeys
	  #set $tidata = $interfaces[$tiname]
	  #if $tidata["interface_type"].lower() in ("slave","bond_slave","bridge_slave") and $tidata["interface_master"].lower() == $iname
	    #if $tidata["mac_address"] != '':
	      #set $mac = $tidata["mac_address"]
# Found a slave for this interface: $tiname ($mac)
  	      #break
            #end if
	  #else if $tidata["interface_type"].lower() == "bonded_bridge_slave" and $tidata["interface_master"].lower() == $iname
	    ## Find a slave for this interface.
	    #for $stiname in $ikeys
	      #set $stidata = $interfaces[$stiname]
	      #if $stidata["interface_type"].lower() in ("slave","bond_slave","bridge_slave") and $stidata["interface_master"].lower() == $tiname
	        #if $stidata["mac_address"] != '':
		  #set $mac = $stidata["mac_address"]
# Found a slave for this interface: $tiname -> $stiname ($mac)
  	  	  #break
		#end if
	      #end if
	    #end for
	  #end if
	#end for
      #end if
      #if $static and $ip != ""
        #if $netmask == ""
	  ## Netmask not provided; default to /24.
	  #set $netmask = "255.255.255.0"
	#end if
	#set $netinfo = "--bootproto=static --ip=%s --netmask=%s" % ($ip, $netmask)
	#if $gateway != ""
	  #set $netinfo = "%s --gateway=%s" % ($netinfo, $gateway)
	#end if
	#if $len($name_servers) > 0
	  #set $netinfo = "%s --nameserver=%s" % ($netinfo, $name_servers[0])
	#end if
      #else if not $static
        #set $netinfo = "--bootproto=dhcp"
      #else
        ## Skip this interface; it's set as static, but without
        ## networking info.
# Skipping (no configuration) ...
	#continue
      #end if
      #if $hostname != ""
        #set $netinfo = "%s --hostname=%s" % ($netinfo, $hostname)
      #end if
# Configuring $iname ($mac)
if mac_exists $mac
then
  ## This sets $IFNAME:
  get_ifname $mac
  echo "network --device=\$IFNAME $netinfo" >> /tmp/pre_install_network_config
      #for $route in $static_routes
        #if $routepattern.match($route)
	  #set $routebits = $route.split(":")
	  #set [$network, $router] = $route.split(":")
  ip route add $network via $router dev \$IFNAME
        #else
# Warning: Invalid route "$route"
        #end if
      #end for
fi
    #else
      #if $iface_type.lower() in ("slave","bond_slave","bridge_slave","bonded_bridge_slave")
# Skipping (slave-interface) ...
      #else
# Skipping (not a physical interface) ...
      #end if
    #end if
  #end for
#else
## This is what we do if there *is* a system record.
  #if $getVar("stemcell", "")
    ## If it's a stemcell, we automatically know certain things about
    ## the network adapters.  There's no bridging or bonding, they're
    ## eth0/eth1, and we know the setup for each.  Just write a known
    ## value to /tmp/pre_install_network_config.
cat <<EOF >>/tmp/pre_install_network_config
network --device=$getVar('if01', '') --onboot=yes --bootproto=static --ip=129.79.53.51 --netmask=255.255.255.0 --gateway=129.79.53.1 --nameserver="192.168.96.4,192.168.97.12,129.79.1.1,129.79.5.100" --hostname=interjection.uits.indiana.edu
network --device=$getVar('if02', '') --onboot=yes --bootproto=dhcp
EOF
  #end if
#end if
# End goc_pre_install_network_config generated code
