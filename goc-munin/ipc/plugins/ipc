#!/usr/bin/perl -w
#
# Plugin to monitor SYSV IPC
# By Thomas Lee <thomlee@iu.edu>
# Begun 2012/03/02
# Last modified 2012/03/02
#
# Parameters understood:
#
# 	config   (required)
# 	autoconf (optional - used by munin-node-configure)
#       suggest  (optional - used by munin-node-configure)
#
# Magic markers - optional - used by installation scripts and
# munin-node-configure:
#

use strict;

$ENV{PATH} = join(':', qw(/sbin
			  /bin
			  /usr/sbin
			  /usr/bin
			  /usr/local/sbin
			  /usr/local/bin
			  /opt/sbin
			  /opt/bin));

my @IPC = qw(shm msg sem);

my %IPC =
  (
   shm =>
   {
    short => 'shm',
    mass => 'Shared memory segments',
    plural => 'shared memory segments',
    option => 'm',
   },
   msg =>
   {
    short => 'msg',
    mass => 'Message queues',
    plural => 'message queues',
    option => 'q',
   },
   sem =>
   {
    short => 'sem',
    mass => 'Semaphore sets',
    plural => 'semaphore sets',
    option => 's',
   },
  );

###############################################################################
# Subroutines
###############################################################################

sub parse_line(@) {

  # Just returns the number at/near the end of the line.

  my @lines = @_;

  my($value) = ($lines[0] =~ /(\d+)\s*$/);
  return $value;
}

sub gather_ipcs_data() {

  # Collect all the facilities' data from one run of ipcs

# ------ Shared Memory Status --------
# segments allocated 4
# pages allocated 4
# pages resident  4
# pages swapped   0
# Swap performance: 0 attempts     0 successes

# ------ Semaphore Status --------
# used arrays = 7
# allocated semaphores = 7

#   ------ Messages: Status --------
# allocated queues = 0
# used headers = 0
# used space = 0 bytes

  my(@output) = `ipcs -ua`;
  chomp(@output);
  $IPC{shm}->{data} = &parse_line(grep { /segments\s+allocated/ } @output);
  $IPC{msg}->{data} = &parse_line(grep { /allocated queues/ } @output);
  $IPC{sem}->{data} = &parse_line(grep { /used\s+arrays/ } @output);
}

###############################################################################
# Subroutines over, main program now
###############################################################################

# All Munin modules should understand the 'autoconf' parameter, which
# just prints 'yes' or 'no (with possible explanation)' depending on
# whether there is a problem running it, returning 0 if yes and 1 if
# no

if($ARGV[0] and $ARGV[0] eq 'autoconf') {
  print("yes\n");
  exit(0);
}

# The 'suggest' parameter I'm not totally clear on -- perhaps it
# suggests some sort of configuration value

if($ARGV[0] and $ARGV[0] eq 'suggest') {
  exit 0;
}

# The 'config' parameter just tells the module to list out some
# metadata about the return values

if($ARGV[0] and $ARGV[0] eq 'config') {
  print(<<"EOF");
graph_title SYSV IPC Facilities
graph_vlabel Average number
graph_args --base 1000 --lower-limit 0
graph_category System
graph_info Indicates time-average number of each type of SYSV IPC facility
EOF
  ;
  foreach my $fac (@IPC) {
    my $what = $IPC{$fac}->{plural};
    print(<<"EOF");
$fac.label $IPC{$fac}->{mass}
$fac.draw LINE2
$fac.info Average number of $what
EOF
  ;
  }
  exit 0;
}

# Lacking a parameter, print the data

&gather_ipcs_data();
foreach my $fac (@IPC) {
  printf("%s.value %d\n", $fac, $IPC{$fac}->{data});
}

exit 0;

# vim:syntax=perl
